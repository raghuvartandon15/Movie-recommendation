# -*- coding: utf-8 -*-
"""MovieRecommender.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AfwZKOFi1ZD2UrCwgEL_iWUH7nZDLP56
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

credits=pd.read_csv("/content/drive/MyDrive/Dataset/tmdb_5000_credits.csv")
movie=pd.read_csv("/content/drive/MyDrive/Dataset/tmdb_5000_movies.csv")

credits.head()
movie.head()

movies=movie.merge(credits, on="title")
print(movies.shape)
movies.columns

"""# **attritubes** **that are useful**
genres, id, keywords, title, overview, cast, crew
"""

movies=movies[['movie_id', 'title', 'overview', 'genres', 'keywords', 'cast', 'crew']]
movies.head()

"""# **checking null values(datapreprocessing)**"""

movies.isna().sum()

movies=movies.dropna()

movies.duplicated().sum()

movies.head()

"""# **conversion of data**"""

movies['genres'].iloc[0]

import ast
def convert(obj):
    L=[]
    for i in ast.literal_eval(obj):
      L.append(i["name"])
    return L

movies['genres']=movies['genres'].apply(convert)
movies['keywords']=movies['keywords'].apply(convert)

movies['genres']

movies.cast.iloc[0]

def convert3(obj):
    L=[]
    counter=0
    for i in ast.literal_eval(obj):
      if(counter!=3):
        L.append(i["name"])
      else:
        break
    return L

movies['cast']=movies.cast.apply(convert3)

movies['cast']

def fetch_director(obj):
    L=[]
    counter=0
    for i in ast.literal_eval(obj):
      if(i['job']=='Director'):
        L.append(i['name'])
        break
    return L

movies['crew']=movies['crew'].apply(fetch_director)

movies.overview  #cahnge string to list

movies.overview=movies.overview.apply(lambda x:x.split())

movies.genres=movies.genres.apply(lambda x:[i.replace(" ", "") for i in x])
movies.keywords=movies.keywords.apply(lambda x:[i.replace(" ", "") for i in x])
movies.cast=movies.cast.apply(lambda x:[i.replace(" ", "") for i in x])
movies.crew=movies.crew.apply(lambda x:[i.replace(" ", "") for i in x])

movies.head()

movies['tags']=movies.overview+movies.genres+movies.keywords+movies.cast+movies.crew
movies.head()

new_df=movies[['movie_id', 'title', 'tags']]
new_df.head()

new_df["tags"]=new_df["tags"].apply(lambda x:" ".join(x))

new_df.head()

new_df["tags"]=new_df["tags"].apply(lambda x:x.lower())

"""# **vectorisation**
forming 2d points of tags attribute based of the common words

"""

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=5000, stop_words="english")

vectors=cv.fit_transform(new_df['tags']).toarray()
vectors[0]

cv.get_feature_names_out()

"""applying steming (dance, dancing, danced -> dance, dance, dance)"""

import nltk
from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()

def stem(text):
  y=[]
  for i in text.split():
    y.append(ps.stem(i))
  return " ".join(y)

new_df['tags']=new_df['tags'].apply(stem)

"""# **simailarites**
finding simailarites between 2 points, by angle and not by distance bwtween 2 points. high simailarity more simialr the movie. range=0-1
"""

from sklearn.metrics.pairwise import cosine_similarity
similarity=cosine_similarity(vectors)

similarity[1]

def recommend(movie):
    if movie in new_df['title'].values:
        movie_index = new_df[new_df['title'] == movie].index[0]
        distances = similarity[movie_index]
        movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

        for i in movies_list:
            print(new_df['title'].iloc[i[0]])
    else:
        print("Movie not present in dataset")

recommend("Iron Man")

import pickle
pickle.dump(new_df, open('movies.pkl', 'wb'))

from google.colab import files
files.download('movies.pkl')

pickle.dump(new_df.to_dict(), open('movie_dict.pkl', 'wb'))

files.download('movie_dict.pkl')

pickle.dump(similarity, open('similarity.pkl', 'wb'))

files.download('similarity.pkl')